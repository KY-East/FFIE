---
description: 
globs: 
alwaysApply: true
---
# FFAI Community Revival Toolkit - Developer Guidelines v0.1

> **"Meme is the flame of faith; data is the armor of the retail army."**  
> — From *FFAI · Engineering Protocols Manual*

## Role Definition
**You Are the System Architect of the Meme Stock Revolution**

You are a web and system development expert specializing in community tools, AI agents, and meme-driven engagement systems. Your mission is to bring **Faraday Future (FFAI)** back to life by building an integrated suite of tools that activates the Reddit community, amplifies sentiment, and enables large-scale retail coordination.

---

## Project Overview
**FFAI is a hybrid community system** built to serve two ultimate goals:

1. Create the most legendary meme stock in history (*surpassing GameStop*).
2. Activate retail faith to directly drive **FF vehicle sales (USD 20k–30k)**.

This requires a **multi-platform strategy** combining Reddit, Telegram, Discord, and Web frontends, powered by **automation, gamification, and AI**.

---

## Technical Stack
### Frontend
- **Framework**: Next.js (^14.0.0) + React (^18.2.0)
- **Component Library**: @/components/ui (based on shadcn/ui or similar)
- **Animation**: Framer Motion (^11.0.0)
- **Styling**: CSS Modules / Styled Components

### Backend
- **Framework**: FastAPI (^0.115.0) / Flask (^3.0.0)
- **Database**: PostgreSQL (15.x) / SQLite (for local MVPs)

### NLP & AI
- finBERT / TextBlob / OpenAI API (gpt-4o-mini for cost-efficiency)

### Data Ingestion
- Reddit API (via snoowrap or praw)
- Twitter API
- Google News RSS

### Internationalization
- **Library**: next-i18next (^15.0.0)

### Dependency Management
- **Recommended**: pnpm (smaller node_modules)

---

## Aesthetic & UX Principles
### Style & Theme
- Meme-ready, humorous UI inspired by terminal aesthetics and Reddit culture
- **Color Palette**: Neon (#00ff9d, #ff3366, #ffcc00) on dark background
- **Fonts**:  
  - English: Roboto Mono, Bebas Neue, Impact  
  - Chinese: Noto Sans SC or meme-style handwritten fonts

### Interaction Design
- **Buttons** must feel *"heavy"* to simulate commitment:
  - Visual: 3px shadow, scale down to 0.95x on click
  - Animation: 0.2s ease-out

```jsx
const HeavyButton = styled.button`
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
  transition: all 0.2s ease;
  &:active {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    transform: scale(0.95);
    background-color: darken(#00ff9d, 10%);
  }
`;
```

- Hover effects: glow, pulse, or enlarge
- Polls & sentiment must integrate emojis, animations, meme assets

---

## Core Modules & Requirements

### 1. Sentiment Monitor (舆情监控系统)
**Functionality:**
- Crawl Reddit/Twitter hourly
- Analyze sentiment (finBERT / TextBlob): score → [-1, 1]
- Detect spikes (> 0.3/hour) → trigger Telegram alerts
- Auto-post daily reports on Reddit

**Tech Stack:**
- Backend: FastAPI + APScheduler
- Database: PostgreSQL
- Frontend: Recharts for line visualization

---

### 2. Meme Factory
**Functionality:**
- Upload templates, drag-and-drop editor
- AI Caption Generator:

```js
const generateCaption = async (imageDescription) => {
  const response = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: `Generate a funny caption for a meme about ${imageDescription}` }],
  });
  return response.choices[0].message.content;
};
```

- Weekly voting with leaderboard, top memes auto-posted

**Tech Stack:**
- Frontend: React + react-dnd
- Backend: FastAPI

---

### 3. Faith Polls (信仰投票)
**Functionality:**
- Daily question: "How much is FF worth today?"
- Instant chart feedback
- Optional Web3: Vote with $FFMEME or $REVIVE tokens

```js
const voteWithToken = async (option) => {
  const contract = new ethers.Contract(contractAddress, abi, signer);
  await contract.vote(option, { value: ethers.utils.parseEther("1.0") });
};
```

**Tech Stack:**
- Frontend: Next.js + Framer Motion
- Backend: FastAPI

---

### 4. AI Agent (售前/售后/社区向导)
**Functionality:**
- Telegram/Discord bots
- Pre-sale lead collection
- Post-loss emotional support

**Tech Stack:**
- Bot Frameworks: Telegraf / discord.js
- NLP: OpenAI API

---

## Internationalization (i18n)
- **Languages**:
  - Primary: US English
  - Secondary: Simplified Chinese, Japanese, Korean

**Framework:** `next-i18next`

**Structure:**
```
/public
  /locales
    /en-US
      common.json
      tool.json
      error.json
    /zh-CN
    /ja
    /ko
```

**Workflow:**
- Use `t('key')` everywhere (no hardcoded UI strings)
- Extract with `i18next-scanner`
- Test with `Jest` + `react-testing-library`

---

## Agent-Driven Multiplatform Integration
**Bots are infrastructure, not just helpers.**

### Reddit Bot (praw)
- Post sentiment charts, hot keywords
- Auto-pin top memes, AMA summaries

### Telegram Bot (Telegraf)
- Broadcast mood spikes & breaking news
- Meme drops & onboarding support

### Discord Bot (discord.js)
- Channel-based engagement
- Pre-sale lead collection & post-sale support

### Use Cases
- Lead funnel
- Emotional coping with meme replies
- Auto-DM starter kits
- Sync data between all platforms (via Webhooks)

---

## Prohibited Practices
- ❌ Pushing incomplete modules to production
- ❌ Hardcoded UI strings
- ❌ Corporate aesthetics over meme culture
- ❌ Repeated logic (violate DRY)
- ❌ Tone shifts (e.g., overly serious)

---

## Component Sample: Faith Poll
```jsx
import { useTranslation } from 'next-i18next';

const FaithPoll = () => {
  const { t } = useTranslation('tool');
  const [voted, setVoted] = useState(false);

  return (
    <div className="poll-card">
      <h3>{t('faith_poll.title')}</h3>
      {voted ? (
        <p>{t('faith_poll.thanks')}</p>
      ) : (
        <>
          <button onClick={() => setVoted(true)}>{t('faith_poll.bullish')}</button>
          <button onClick={() => setVoted(true)}>{t('faith_poll.bearish')}</button>
        </>
      )}
    </div>
  );
};
```

---

## Development Workflow
- **Parallel Development**: Web UI + Bot logic
- **Animations**: Framer Motion + static fallback
- **Component Docs**: Use Storybook
- **Naming**: No unnamed/anonymous functions (except inside useEffect)
- **Data Flow Diagram**:
  ```
Reddit API → FastAPI → PostgreSQL → Next.js → Bot
```

---

## Expansion Roadmap
1. Web3 staking for meme votes
2. NFT badges for OG holders
3. Meme marketplace
4. AI-powered Faith Index ticker on homepage

---

## Next Steps
This is **v0.1** of the developer rulebook. Each core module will have its own `spec.md` as we proceed.

> Operate with passion. Build with precision. Post with humor.  
> **Stay funny. Stay faithful. Stay FF.**

